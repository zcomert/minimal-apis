@startuml
title BookApi

left to right direction

package Entities {
    class Book {
        +Id: int
        +Title: String
        +Price: Decimal
        +URL: String
        +CategoryId: int
        +Category: Category
    }

    class Category {
        +CategoryId: int
        +CategoryName: String
        +Books: ICollection<Book>
    }

    ' Category "1" --> "0..*" Book : "Books"
    Book "n" o-down-> "1" Category : "one to many"
}

package DTOs
{
    abstract class BookDtoBase
    {
        +title:String
        +price:Decimal
        +categoryId:int
    }

    class BookDto
    {
        +id:int
    }
    class BookDtoForInsertion
    {

    }
    class BookDtoForUpdate
    {

    }
}

package Entities.Exceptions
{
    abstract class NotFoundException {
        +NotFoundException(message: String)
    }

    class BookNotFoundException {
        +BookNotFoundException(id: int)
    }
}


package Repositories
{
    class RepositoryContext   {
        +Books:DbSet<Book>
        +Categories:DbSet<Category>
        +RepositoryContext(options:DbContextOptions)
        +OnModelCreating(modelBuilder:ModelBuilder)
    }

    abstract class RepositoryBase<T> {
        # _context:RepositoryContext
        + Get(int id): T?
        + GetAll(): List<T>
        + Add(T item): void
        + Remove(T item): void
        + Update(T item): void
    }
    class BookRepository {
        +Get(id):Book?
        +GetAll():List<Book>
    }
    class CategoryRepository {
        
    }
}

package Services
{
    class BookService
    {
        -bookList:List<Book>
        --
        +Count:int
        --
        +GetBooks():List<Book>
        +GetBookById(int:i):Book
        +AddBook(item:BookDtoForInsertion)
        +UpdateBook(id:int, item:BookDtoForUpdate)
        +DeleteBook(id:int)

    }
    class BookServiceV2
    {
        -context:RepositoryContext
        --
        +Count:int
        --
        +GetBooks():List<Book>
        +GetBookById(int:i):Book
        +AddBook(item:BookDtoForInsertion)
        +UpdateBook(id:int, item:BookDtoForUpdate)
        +DeleteBook(id:int)

    }
    class BookServiceV3
    {
        -context:BookRepository
        --
        +Count:int
        --
        +GetBooks():List<Book>
        +GetBookById(int:i):Book
        +AddBook(item:BookDtoForInsertion)
        +UpdateBook(id:int, item:BookDtoForUpdate)
        +DeleteBook(id:int)
        -Validate<T>(item:T)
    }
}


package Abstracts
{
    interface IBookService
    {
        +Count:int
        +GetBooks():List<Book>
        +GetBookById(id:int):Book
        +AddBook(item:BookDtoForInsertion):Book
        +UpdateBook(id:int, item:BookDtoForUpdate):Book
        +DeleteBook(id:int):void
    }
}

package Configuration {
    class MappingProfile {

    }
    class ConfigurationExtensions {
        {static} +ValidateIdRange(int id): void
        {static} +UseCustomExceptionHandler(IApplicationBuilder app): void
        {static} +AddCustomCors(services:IServiceCollection): IServiceCollection
        {static} +AddCustomSwagger(services:IServiceCollection): IServiceCollection
    }
}

MappingProfile -right-|> Profile : "<<extends>>"

BookService .up.|> IBookService : "<<implements>>"
BookServiceV2 .up.|> IBookService : "<<implements>>"
BookServiceV3 .up.|> IBookService : "<<implements>>"


BookRepository -l-|> RepositoryBase  : "<<extends>>"
CategoryRepository -r-|> RepositoryBase  : "<<extends>>"
RepositoryBase o-d- RepositoryContext : "has-a"
RepositoryContext -r-|> DbContext : "<<extends>>"

BookNotFoundException -right-|> NotFoundException : "<<extends>>"



BookDto -up-|> BookDtoBase : "<<extends>>"
BookDtoForUpdate -left-|> BookDtoBase : "<<extends>>"
BookDtoForInsertion -right-|> BookDtoBase : "<<extends>>"

hide empty members